//! Add error on reads

/* standard use */

/* crate use */
use rand::Rng;

/* local use */
use crate::model;

type Seq = Vec<u8>;

/// From identity an seq length compute number of edit
pub fn number_of_edit(target: f64, length: usize) -> f64 {
    (1.0 - target) * length as f64
}

/// Apply error on read
pub fn add_error(
    target: f64,
    seq: &[u8],
    error_model: &model::Error,
    glitch_model: &model::Glitch,
    rng: &mut rand::rngs::StdRng,
) -> (Seq, DiffPos) {
    let k = error_model.k();
    let mut changes = generate_change(seq, number_of_edit(target, seq.len()), error_model, rng);
    changes.extend(generate_glitches(seq.len(), glitch_model, rng));

    changes.sort_by_cached_key(|x| x.begin);

    let asm_changes = assemble_change(changes, k);

    (
        apply_changes(seq, &asm_changes),
        DiffPos::from_change(&asm_changes),
    )
}

/// Generate glitches
pub fn generate_glitches(
    length: usize,
    model: &model::Glitch,
    rng: &mut rand::rngs::StdRng,
) -> Vec<Change> {
    let mut glitches = Vec::new();

    let mut position = 0;

    while let Some((begin, end, seq)) = model.get_glitch(rng) {
        position += begin;
        if position > length || position + end > length {
            break;
        }
        glitches.push(Change::new(position, end - begin, &seq));
    }

    glitches
}

/// Generate change have to apply on read
pub fn generate_change(
    seq: &[u8],
    mut target: f64,
    model: &model::Error,
    rng: &mut rand::rngs::StdRng,
) -> Vec<Change> {
    let mut changes = Vec::new();
    let k = model.k();

    // generate change
    while target > 0.0 {
        let pos = rng.gen_range(0..(seq.len() - k));

        let (kmer, edit) = model.add_errors_to_kmer(&seq[pos..pos + k], rng);
        if edit == 0 {
            continue;
        }
        changes.push(Change::new(pos, k, &kmer));
        target -= edit as f64;
    }

    changes
}

#[derive(Debug, Clone, PartialEq)]
pub struct Change {
    pub begin: usize,
    pub end_raw: usize,
    pub end_err: usize,
    pub err_seq: Vec<u8>,
}

impl Change {
    pub fn new(begin: usize, k: usize, err_seq: &[u8]) -> Self {
        Self {
            begin,
            end_raw: begin + k,
            end_err: begin + err_seq.len(),
            err_seq: err_seq.to_owned(),
        }
    }
}

/// Assemble overlapping change
pub fn assemble_change(old: Vec<Change>, k: usize) -> Vec<Change> {
    let mut changes = Vec::new();

    let mut prev: Option<Change> = None;
    for change in old.iter() {
        if let Some(ref mut p) = prev {
            if change.begin < p.end_err {
                p.end_raw = change.begin + k;

                let ovl = p.end_err - change.begin;
                if change.err_seq.len() > ovl {
                    p.err_seq.extend(&change.err_seq[ovl..]);
                }
                p.end_err = p.begin + p.err_seq.len();
            } else if change.begin < p.end_raw {
                p.end_raw = change.begin + k;

                p.err_seq.extend(&change.err_seq);
                p.end_err = p.begin + p.err_seq.len();
            } else {
                changes.push(p.clone());
                prev = Some(change.clone());
            }
        } else {
            prev = Some(change.clone());
        }
    }

    if let Some(p) = prev {
        changes.push(p);
    }

    changes
}

#[derive(Debug, PartialEq)]
pub struct DiffPos {
    pub raw: Vec<usize>,
    pub err: Vec<usize>,
}

impl DiffPos {
    pub fn from_change(changes: &[Change]) -> Self {
        let mut raw = Vec::new();
        let mut err = Vec::new();
        let mut err_len = 0;

        for change in changes {
            let match_dist = if !raw.is_empty() {
                change.begin - raw[raw.len() - 1]
            } else {
                change.begin
            };

            raw.push(change.begin);
            raw.push(change.end_raw);

            err_len += match_dist;
            err.push(err_len);
            err_len += change.err_seq.len();
            err.push(err_len);
        }

        Self { raw, err }
    }
}

/// Apply changes on sequencs
pub fn apply_changes(seq: &[u8], changes: &[Change]) -> Seq {
    let mut err = Vec::with_capacity(seq.len());
    let mut pos_in_raw = 0;

    for change in changes {
        err.extend(&seq[pos_in_raw..change.begin]);
        err.extend(&change.err_seq);
        pos_in_raw = change.end_raw;
    }
    err.extend(&seq[pos_in_raw..]);
    err
}

#[cfg(test)]
mod t {
    use super::*;
    use rand::SeedableRng;

    fn init() {
        let _ = env_logger::builder()
            .filter_level(log::LevelFilter::Trace)
            .is_test(true)
            .try_init();
    }

    #[test]
    fn nb_of_edit() {
        assert_eq!(5.000000000000004, number_of_edit(0.95, 100));
        assert_eq!(131.99999999999997, number_of_edit(0.89, 1200));
    }

    #[test]
    fn add_error_() {
        let mut rng = rand::rngs::StdRng::seed_from_u64(42);
        let error_model = model::Error::from_stream(ERROR, &mut rng).unwrap();
        let glitch_model = model::Glitch::new(100.0, 25.0, 25.0).unwrap();

        let raw = crate::random_seq(500, &mut rng);

        let (seq, diffpos) = add_error(0.90, &raw, &error_model, &glitch_model, &mut rng);

        println!("{:?}", diffpos);
        assert_eq!(b"CCGATCAGGTGATCAGACCACCTTCAGCATGCGCTCATCTAGTCATGGAGGAAGAATCCCTTGGCGAACACTCGACCGGAGGCCCGCACAAGTGCCAGAGGCTGGGTCGAAGGGGTATGCTACCAGCTCAATGGCTTAGCGGCGCACGTCCTCGTCCCCCAACGATTCGCCGTTGACCAGGTTGTATCCAGCATTGGAAGAACGCACCCGGGGGGAGCACAGATCCTAGCAGTACACGCTCTGGGTCCTCTACTGTGTGACCGTTCCCTTCTATTCACGTCGATTGGAGGAGGGAGCGAATAAAGATAGACGAGGTTTAACTGTCTTCCATCTTCTAATCATCGCGAGTTAGCCACGGTCTTCTCGTTTTTGCAGTGCATCTTGACTCAACTGCGGATGAGACCCTGAGCGTTTAAGAAAAGGTGGTGTACCTGGCGGCTCGAGTGAAAGATTCGTACCACGCATCTACAGCTTTCGTCTTTAGGGGGTCACGGGTCTCGAATGGCC".to_vec(), seq);
        assert_eq!(
            DiffPos {
                raw: vec![
                    4, 11, 33, 41, 42, 49, 51, 58, 74, 81, 84, 93, 104, 112, 112, 123, 149, 156,
                    171, 248, 257, 264, 265, 272, 273, 281, 281, 288, 302, 309, 322, 329, 331, 352,
                    355, 362, 371, 382, 383, 390, 391, 398, 399, 406, 410, 419, 427, 434, 436, 443,
                    446, 453, 457, 464, 473, 483
                ],
                err: vec![
                    4, 10, 32, 41, 42, 48, 50, 58, 74, 81, 84, 92, 103, 111, 111, 123, 149, 157,
                    172, 251, 260, 268, 269, 277, 278, 286, 286, 293, 307, 315, 328, 336, 338, 360,
                    363, 370, 379, 390, 391, 397, 398, 404, 405, 412, 416, 425, 433, 440, 442, 449,
                    452, 458, 462, 470, 479, 490
                ]
            },
            diffpos
        );
    }

    #[test]
    fn get_glitches() {
        let mut rng = rand::rngs::StdRng::seed_from_u64(42);
        let model = model::Glitch::new(1_000.0, 25.0, 25.0).unwrap();

        let glitches = generate_glitches(10_000, &model, &mut rng);

        assert_eq!(
            vec![
                Change {
                    begin: 381,
                    end_raw: 391,
                    end_err: 404,
                    err_seq: vec![
                        65, 84, 84, 65, 84, 65, 71, 84, 65, 67, 71, 71, 84, 65, 84, 65, 71, 84, 71,
                        71, 84, 84, 65
                    ]
                },
                Change {
                    begin: 2553,
                    end_raw: 2555,
                    end_err: 2573,
                    err_seq: vec![
                        71, 67, 67, 84, 65, 65, 71, 84, 71, 71, 67, 71, 67, 67, 67, 71, 84, 84, 71,
                        84
                    ]
                },
                Change {
                    begin: 2607,
                    end_raw: 2670,
                    end_err: 2634,
                    err_seq: vec![
                        65, 71, 71, 65, 65, 84, 67, 67, 65, 67, 84, 84, 65, 84, 65, 84, 65, 65, 67,
                        65, 67, 65, 71, 71, 84, 65, 84
                    ]
                },
                Change {
                    begin: 2675,
                    end_raw: 2733,
                    end_err: 2676,
                    err_seq: vec![67]
                },
                Change {
                    begin: 2842,
                    end_raw: 2897,
                    end_err: 2877,
                    err_seq: vec![
                        71, 71, 67, 65, 84, 71, 67, 67, 84, 65, 84, 65, 84, 84, 67, 84, 65, 84, 71,
                        65, 67, 65, 71, 67, 65, 71, 71, 65, 84, 84, 65, 84, 71, 71, 65
                    ]
                },
                Change {
                    begin: 3936,
                    end_raw: 3938,
                    end_err: 3940,
                    err_seq: vec![71, 67, 84, 67]
                },
                Change {
                    begin: 4324,
                    end_raw: 4379,
                    end_err: 4332,
                    err_seq: vec![65, 67, 71, 84, 84, 84, 71, 71]
                },
                Change {
                    begin: 5139,
                    end_raw: 5196,
                    end_err: 5160,
                    err_seq: vec![
                        67, 67, 67, 71, 84, 65, 71, 67, 65, 67, 71, 65, 67, 67, 71, 71, 67, 84, 65,
                        84, 71
                    ]
                },
                Change {
                    begin: 5164,
                    end_raw: 5168,
                    end_err: 5189,
                    err_seq: vec![
                        84, 84, 84, 84, 67, 84, 84, 71, 71, 65, 67, 65, 84, 65, 71, 84, 84, 84, 67,
                        71, 84, 67, 67, 65, 67
                    ]
                },
                Change {
                    begin: 5313,
                    end_raw: 5358,
                    end_err: 5370,
                    err_seq: vec![
                        84, 65, 67, 65, 65, 71, 71, 65, 67, 71, 67, 84, 84, 71, 71, 71, 65, 65, 84,
                        65, 71, 71, 71, 67, 65, 71, 67, 71, 71, 65, 71, 84, 84, 65, 84, 67, 71, 84,
                        71, 84, 65, 67, 67, 84, 67, 67, 84, 65, 71, 67, 84, 84, 84, 84, 65, 71, 84
                    ]
                },
                Change {
                    begin: 5912,
                    end_raw: 5955,
                    end_err: 5933,
                    err_seq: vec![
                        65, 67, 65, 71, 84, 71, 84, 65, 65, 67, 65, 84, 84, 71, 71, 71, 65, 67, 71,
                        67, 84
                    ]
                },
                Change {
                    begin: 6209,
                    end_raw: 6240,
                    end_err: 6215,
                    err_seq: vec![67, 71, 67, 67, 71, 71]
                },
                Change {
                    begin: 6774,
                    end_raw: 6777,
                    end_err: 6806,
                    err_seq: vec![
                        84, 84, 67, 67, 84, 84, 71, 65, 67, 84, 65, 84, 65, 67, 67, 71, 65, 84, 67,
                        71, 84, 71, 71, 65, 71, 84, 84, 67, 65, 84, 71, 67
                    ]
                },
                Change {
                    begin: 7774,
                    end_raw: 7775,
                    end_err: 7789,
                    err_seq: vec![67, 67, 84, 67, 65, 71, 67, 71, 84, 84, 67, 84, 67, 71, 71]
                }
            ],
            glitches
        );
    }

    const ERROR: &[u8] = b"AACACAG,0.797187;AACACGG,0.019319;AGCACAG,0.016450;AACAG,0.015358;AACGCAG,0.008730;AACACG,0.008730;AACCTGG,0.007841;ACACAG,0.006224;AACCTG,0.005214;AACACAAG,0.004405;AACACCAG,0.003961;AGCAG,0.003476;AACG,0.002870;AACTACAG,0.002748;AACTTACAG,0.002587;AACACACAG,0.002546;AACTGG,0.002506;AATACAG,0.002425;ACAG,0.002344;AACGG,0.002304;AAACACAG,0.002183;AACACGAG,0.002142;AACACCG,0.001859;AACCACAG,0.001778;AACTG,0.001738;AAGCACAG,0.001657;
AAGTGGC,0.844606;AGTGGC,0.034782;AAGTAGC,0.011416;AAAGTGGC,0.010417;AATTGGC,0.009222;AAATGGC,0.007010;AGAGTGGC,0.005547;ATGGC,0.004424;AAATTGGC,0.003942;AAGTGAC,0.003193;AGGTGGC,0.002658;AATGGC,0.002283;AGTAGC,0.002016;AAGTGGCC,0.001748;AGAAGTGGC,0.001373;AAGTAAC,0.001320;AAGTATGGC,0.001266;AAGAGTGGC,0.001249;AAGTGC,0.001088;AAGC,0.001052;AGATGGC,0.000999;AAAAGTGGC,0.000945;AAGATGGC,0.000910;AAGTGAGC,0.000892;AAGGTGGC,0.000874;AATTAGC,0.000856;
AATCCAC,0.799294;AATCAC,0.046700;AATCC,0.028049;AATCCGC,0.018289;AATCCCAC,0.015392;AATCCC,0.012983;AATC,0.012349;ATCCAC,0.010303;AAATCCAC,0.003857;AATCTAC,0.002517;ATCAC,0.002499;AATCCACAC,0.002028;AATCCACC,0.001956;AAATCAC,0.001702;AATCACAC,0.001666;AATAC,0.001593;AGTCCAC,0.001557;AATCCCGC,0.001286;AGTCAC,0.001159;AATCCCC,0.001141;AATCCGCAC,0.001123;AATCGC,0.000905;AATCTGC,0.000887;AATCACC,0.000833;AATCCTC,0.000797;AATCCCCAC,0.000761;
AATCCGG,0.786704;AATCGG,0.074243;AATCCAG,0.023926;AATCAG,0.013362;ATCCGG,0.013010;AATCCCGG,0.009582;AATCCG,0.007617;AATCAGG,0.006765;AATCG,0.003929;AAATCCGG,0.003280;ATCGG,0.003076;AGTCCGG,0.003021;AATCCAGG,0.002002;AATCTGG,0.001724;AATCCGGG,0.001686;AGTCGG,0.001612;AATCCGAG,0.001557;AATCAAG,0.001501;AATCGGG,0.001371;AATCCCG,0.001297;AAATCGG,0.001242;AATCCACGG,0.001223;AGATCCGG,0.001149;AATCGAG,0.001131;ATCCAG,0.000908;AAGATCCGG,0.000834;
ACACAGG,0.771740;ACAGG,0.031057;ACACGGG,0.022596;ACCTGGG,0.018390;ACACAG,0.012472;ACACGG,0.009733;ACGCAGG,0.009244;ACCTGG,0.008608;ACACGAG,0.005576;ACACAAGG,0.004108;ACACG,0.003668;ACTGGG,0.003521;ACGG,0.003521;ACACAGGG,0.002983;ACACAGAG,0.002935;ACGGG,0.002788;ACCTGAG,0.002397;ACCACAGG,0.002250;ACTGG,0.002250;ACACAAG,0.002201;ACAG,0.002201;ATACAGG,0.002201;ACACACAGG,0.002005;ACACCAGG,0.002005;AGCACAGG,0.001712;ACACCGG,0.001663;
ACAGGTA,0.841268;ACGGGTA,0.034150;ACGGTA,0.008468;ACGAGTA,0.006658;ACAAGGTA,0.005939;ACAGAGTA,0.005313;AGGTA,0.004246;ACAGTA,0.003735;ACAGGTAA,0.003202;ACAGGCA,0.002714;ACAGATA,0.002390;ACCAGGTA,0.002366;ACGGAGTA,0.002065;ACAGGGTA,0.001926;ACAATTA,0.001670;ACGAA,0.001438;ACCGGTA,0.001322;AAGGTA,0.001276;AGCAGGTA,0.001230;ACAGA,0.001230;ACGAGGTA,0.001183;ATAGGTA,0.001183;ACCCAGGTA,0.001137;ACCGGGTA,0.001021;ACGAATTA,0.001021;ACTGGGTA,0.000974;
ACGGCAT,0.878082;ACAGCAT,0.033069;ACGGCGT,0.009632;ACAT,0.008891;ACGACAT,0.003562;AGCAT,0.003289;ACTGGCAT,0.002340;ACAACAT,0.002223;AGCGGCAT,0.001820;ACCGGCAT,0.001716;ACGT,0.001703;ACGCGGCAT,0.001508;ACGGCGCT,0.001417;ACGGCGCAT,0.001378;ACGGCGGCAT,0.001352;ATGGCAT,0.001313;ACGGCACAT,0.001274;ACGGCATT,0.001196;ACGGCT,0.001170;ACACGGCAT,0.001092;ACGCAT,0.001053;ACCTGGCAT,0.001027;ACAGCGT,0.000988;ACGGCTT,0.000832;AT,0.000819;ACGTAT,0.000793;
ACGGTAT,0.852143;ACAGTAT,0.036447;ACGATAT,0.005378;ACAT,0.004926;ACGGTGT,0.004334;ACGTAT,0.003812;ACATTAT,0.003307;ACGAGTAT,0.002907;ACCGGTAT,0.002854;ACGGT,0.002524;ACGTTAT,0.002297;ACGAT,0.002176;AGTAT,0.001967;ACGGTAAT,0.001775;ACGACAT,0.001758;ACGGTATT,0.001601;AGCGGTAT,0.001584;ACGGGTAT,0.001566;ACCCGGTAT,0.001358;ACAGGTAT,0.001288;ACGGCAT,0.001131;ACAGTGT,0.001114;ACGGTACAT,0.001114;ACGT,0.001027;ATGGTAT,0.001027;ACGCGGTAT,0.000957;
ACTATGT,0.867157;ACTATAT,0.015597;ATATGT,0.011698;ACTGT,0.008463;ACTAT,0.006425;ACATGT,0.005716;ACTGTGT,0.003633;ACTTATGT,0.002836;ACGCTATGT,0.002703;ACCTATGT,0.002526;ACTATGTT,0.002437;ACTATATGT,0.002260;ACCATGT,0.002083;ACTTTATGT,0.002038;ACTATATT,0.001817;ATTATGT,0.001728;ACCTGT,0.001639;AGCTATGT,0.001551;ACTATCAT,0.001551;ACTATCT,0.001418;ACTATT,0.001418;ATGT,0.001374;ACTATGCT,0.001329;ACTGTAT,0.001241;AATATGT,0.001241;ACT,0.001152;
ACTTATA,0.851547;ACATA,0.027478;ATATA,0.015150;ACTATA,0.012773;ACTTA,0.006647;ACTTTATA,0.005830;ATA,0.005273;ACCCATA,0.004270;ACTTATAA,0.003602;ACTTGTA,0.003268;AACTTATA,0.002265;ACTTATATA,0.002005;ACCATA,0.001671;AGCTTATA,0.001634;ACATATA,0.001560;ACTA,0.001411;ACA,0.001411;ACTTTA,0.001151;ACTTACATA,0.001114;ACCTTA,0.001077;ACTTACA,0.000965;ATTATA,0.000965;ATTTATA,0.000891;ACTTACTA,0.000891;ACTTGCA,0.000854;ACTTATCA,0.000817;
AGAGGAA,0.688408;AGGAA,0.053361;AGAGAA,0.041383;AGAA,0.022650;AAGGAA,0.017881;AGAGGGAA,0.017200;AGAGA,0.013879;AGGGAA,0.013000;AGAGGA,0.010615;AAGAGGAA,0.010332;AGAAGGAA,0.009395;AGA,0.005024;AGAGGAAA,0.004882;AGAAGA,0.004201;AGAAA,0.003860;AGGAGGAA,0.003747;AA,0.003349;AGAGAGA,0.003094;AGAAGAA,0.002867;AGAGAGGAA,0.002867;AGGGGAA,0.002725;AAGAA,0.002668;AGAGAAA,0.002469;AAAGGAA,0.002299;AGGAAA,0.002242;AGAGGAGA,0.002242;
AGATTAT,0.868945;AATTAT,0.014021;AGATTGT,0.011490;AGTTAT,0.011243;AAGATTAT,0.008761;AGATAT,0.007002;ATTAT,0.005704;AAGTTAT,0.005539;AGATT,0.004175;AAATTAT,0.003633;AGATTTAT,0.003238;AGGTAT,0.003222;AGATTATT,0.002055;AGAT,0.002005;AGAATTAT,0.001578;AGGTTAT,0.001249;AAAGATTAT,0.001151;AGGTCAT,0.001052;AGATTAAT,0.000986;AGGTGT,0.000904;AGGGTAT,0.000888;AGATTCT,0.000888;AGGATTAT,0.000888;AGATTGTAT,0.000756;AGATTACT,0.000740;AGATTACAT,0.000723;
AGCCTAA,0.751495;AGCTAA,0.068563;AACCTAA,0.026023;AGCCCTAA,0.025033;AGCCTA,0.016517;ACCTAA,0.007961;AACTAA,0.007724;AGCCTAAA,0.005862;AAGCCTAA,0.004674;AGCTA,0.003723;ACTAA,0.002971;AGCCCTA,0.002495;AGCTAAA,0.002060;AATAA,0.002060;ACCCTAA,0.001862;AGCCTGA,0.001703;AGCCCCTAA,0.001664;AGGCCTAA,0.001466;AAGCTAA,0.001307;AGCCCAA,0.001228;AGGCTAA,0.001069;AGCCACAA,0.000990;AGCCAA,0.000911;AGCCTAAAA,0.000911;AAACTAA,0.000911;AACCTA,0.000871;
AGGAATC,0.808619;AGAATC,0.050734;AGGGAATC,0.015653;AGATC,0.012905;AAGGAATC,0.008852;AGAGATC,0.008293;AAGAATC,0.007128;AGTC,0.006709;AAGATC,0.006336;AGGAGTC,0.006243;AGGAATCC,0.005264;AGGTC,0.004659;AGAGTC,0.004426;AAGTC,0.003261;AATC,0.002655;AGAGAATC,0.001957;AGGATC,0.001863;AGGAGATC,0.001863;AGAAATC,0.001863;AGGGTC,0.001584;AAAGTC,0.001398;AAATC,0.001351;AGGGATC,0.001304;AGGAAATC,0.001258;AAAGATC,0.001025;AAAGGAATC,0.000978;
AGGTATA,0.841963;AGTATA,0.017430;AGAGTATA,0.009414;AAGGTATA,0.008808;AGGTA,0.007690;AGGGTATA,0.007550;AAGTATA,0.007084;AATTATA,0.005220;AGATATA,0.004101;AGGTATAA,0.003402;AGGTGTA,0.002563;AGGCATA,0.002330;ATTTATA,0.001818;ATTATA,0.001724;AAAGGTATA,0.001631;AGACATA,0.001538;AGTA,0.001538;AGATA,0.001538;AGGTATATA,0.001258;AAATTATA,0.001072;ATATA,0.001072;AGAGGTATA,0.000979;AGGAGTATA,0.000979;AGGCCATA,0.000979;AGGTATGA,0.000932;AGAATA,0.000839;
AGTACGG,0.808612;AGTACAG,0.036249;AGTGCGG,0.009776;AGTACG,0.008872;ATTACGG,0.007148;AATACGG,0.006244;AATGCGG,0.005481;AGTGG,0.005001;ATTGCGG,0.004549;AGTACCGG,0.004097;AAGTACGG,0.004097;AGTGCAG,0.003786;AGGTACGG,0.003249;ATACGG,0.002825;AATGCAG,0.002458;ATTGCAG,0.002317;AGTACAGG,0.002260;ATGCGG,0.002204;AGTACACGG,0.001921;AGTACGAG,0.001780;AATTACGG,0.001695;AGTACCCGG,0.001526;AGCGG,0.001384;AGCACGG,0.001271;AGTACCAG,0.001130;ATGCAG,0.001102;
AGTGGCG,0.891662;ATTGGCG,0.011364;AGTAGCG,0.010388;AATGGCG,0.006060;ATGGCG,0.005765;AAGTGGCG,0.005360;AGTGG,0.003831;AATTGGCG,0.003739;AGTG,0.002984;AGTGGCAG,0.002394;AGGTGGCG,0.002210;AGTGGCCG,0.002026;AGTGACG,0.001529;AGTATGGCG,0.001455;AGTGGCTG,0.001234;AGATGGCG,0.001197;AGCG,0.001031;AGTGGCGG,0.000976;AGTGTG,0.000921;ATTAGCG,0.000866;AGTAACG,0.000847;AGTGGCCCG,0.000847;AGTGATGGCG,0.000755;AGCGGCG,0.000755;AGTAAGCG,0.000737;AGTGGCACG,0.000718;
AGTGGTT,0.872561;AGTGGT,0.016267;AGTGGTTT,0.010348;ATTGGTT,0.010066;AGTAGTT,0.008556;ATGGTT,0.005798;AAGTGGTT,0.005234;AATGGTT,0.004812;AGTGATT,0.003785;AATTGGTT,0.003745;AGTGGATT,0.002758;AGTGGATTT,0.002295;AGGTGGTT,0.002154;ATTAGTT,0.001933;AGTGTT,0.001429;AGTGGTTTT,0.001409;AGTGAGTT,0.001268;AGTGGAT,0.001228;AGTGATTT,0.001067;AGTGGGTT,0.001027;AGTGTGGTT,0.000966;AGTAGTTT,0.000866;AGTTT,0.000805;AGATGGTT,0.000725;AAAGTGGTT,0.000664;AGTCGTT,0.000544;
ATAACAC,0.853700;ATAAC,0.022201;ATAACGC,0.014474;ATAGCAC,0.010855;ATAACTTAC,0.004630;ATAACC,0.004048;ACAACAC,0.003864;ACAC,0.002637;AACAC,0.002637;ATAACGCAC,0.002361;ATAACACC,0.002239;ACTAACAC,0.001993;ATAACCAC,0.001993;ATAACACAC,0.001963;AATAACAC,0.001748;ATATAC,0.001717;ATAGC,0.001625;ATAC,0.001625;ATAATAC,0.001595;ACTTAACAC,0.001564;ACCAACAC,0.001472;ATAACTAC,0.001380;ATAACTGC,0.001227;ATACTTAC,0.001196;ATTAACAC,0.000920;ATGCTTAC,0.000920;
ATAATCC,0.841899;ATAATC,0.072835;ATAATCCC,0.007206;ATATCC,0.004864;ATAAATCC,0.003636;ACAATCC,0.003505;ATAATCAC,0.003308;AATCC,0.003292;ATCC,0.002752;ATGTCC,0.001982;AATAATCC,0.001671;ATAAATC,0.001572;ATGATCC,0.001458;ACCAATCC,0.001425;ATAGTCC,0.001392;ATAATCGC,0.001179;ACTAATCC,0.001130;ACAATC,0.001097;ATAGTC,0.001048;ATC,0.001015;AAATCC,0.000983;ATCATCC,0.000901;ATTAATCC,0.000852;ATATC,0.000786;AATC,0.000737;ATGTC,0.000721;
ATAGTAC,0.834526;ATGGTAC,0.023133;ATGAGTAC,0.009561;ATAATTAC,0.008491;ATAGTGC,0.007756;ATGATAC,0.004814;ATAATTGC,0.004680;ATAAGTAC,0.004413;ATAATAC,0.003477;ATGTAC,0.003142;ATAATGC,0.003075;ATATTAC,0.002808;AGTAC,0.002474;ATAGTACC,0.002006;ATGATGC,0.002006;AATAGTAC,0.001738;ATAGGTAC,0.001671;ATATTGC,0.001605;ATGAAGTAC,0.001471;AAGTAC,0.001337;ATGTGC,0.001270;ATGTTAC,0.001203;ATAGTACAC,0.001070;ATAC,0.001003;ATCGTAC,0.001003;ATGGTGC,0.000869;
ATAGTGG,0.831756;ATGGTGG,0.020629;ATAATTGG,0.015318;ATGATGG,0.012572;ATGAGTGG,0.009682;ATAGTG,0.008201;ATAGTAG,0.006828;ATAAGTGG,0.004010;ATAATGG,0.003504;ATGG,0.003251;ATATTGG,0.003215;ATGGTAG,0.002601;ATAATTG,0.002529;ATGTGG,0.002421;AGTGG,0.002023;ATAGTGAG,0.001879;ATAATTAG,0.001517;ATTGG,0.001373;ATGAAGTGG,0.001337;ACAGTGG,0.001264;AATAGTGG,0.001084;AATTGG,0.001012;AAGTGG,0.001012;ATAGTGGG,0.001012;ATGGTG,0.001012;ATCGTGG,0.000975;
ATATAAC,0.890234;ATATAGC,0.016610;ATAAC,0.012259;ATGTAAC,0.004479;ATACCAAC,0.002585;ATACAAC,0.002508;ATACTAAC,0.002047;ATAC,0.001894;ATATAACC,0.001817;ACATAAC,0.001638;AATATAAC,0.001561;ATATATAAC,0.001484;ATATGGC,0.001408;ATATAAAC,0.001280;ATACTTAAC,0.001228;ATATGC,0.001049;ATGC,0.000998;ATATAACGC,0.000947;ATATAC,0.000870;ATATAAGC,0.000845;AAC,0.000819;ACTATAAC,0.000793;ACCATAAC,0.000768;ATATAATAAC,0.000742;ACAAC,0.000742;ATAAAC,0.000742;
ATCCACT,0.806269;ATCACT,0.055836;ATCCGCT,0.022498;ATCCT,0.022306;ATCCCT,0.017643;ATCCCACT,0.013412;ATCCAT,0.006273;ATCT,0.004230;ATCCACTT,0.002620;ATCCACACT,0.002428;ATCCACCT,0.002187;ATCCGCACT,0.002091;ATCCCGCT,0.001947;AATCCACT,0.001731;ATCGCT,0.001634;ATCCACTTT,0.001442;ATACT,0.001370;ATCAT,0.001370;ATCTACT,0.001250;AATCACT,0.001250;ATCACACT,0.001130;ATCACCT,0.001010;ATCCGCCT,0.000721;ATCCACGCT,0.000649;ATCCCTT,0.000505;ATCTGCT,0.000433;
ATCCGGA,0.781749;ATCGGA,0.119655;ATCCCGGA,0.011897;ATCCAGA,0.008448;ATCCGA,0.005813;ATCCGGGA,0.005640;ATCAGGA,0.005616;ATCGA,0.004532;ATCAGA,0.003990;ATCCAGGA,0.003128;ATCGGGA,0.002365;ATCCA,0.002167;ATCA,0.002167;ATCTGGA,0.002044;ATGGA,0.002020;ATCCGAA,0.001995;ATCGAGA,0.001847;ATCCGAGA,0.001823;ATCCGGAA,0.001773;AATCCGGA,0.001429;ATCGGAA,0.001182;AATCGGA,0.000911;ATCGAA,0.000887;AGCCGGA,0.000862;ATCCCGA,0.000813;ACCCGGA,0.000714;
ATGTAGC,0.808443;ATGTGGC,0.033369;ATGTAAC,0.018394;ATGGC,0.011594;ATAGC,0.006949;ATATAGC,0.005537;ATGCTTAGC,0.004756;ATGTAAGC,0.004533;ATATGGC,0.003939;ATGCCAGC,0.003865;ATGCAGC,0.003567;ATGCTGGC,0.003307;ATGC,0.003307;ATGGCAGC,0.002044;ATGCTTGGC,0.001858;ATGCTAGC,0.001821;ATGTGC,0.001821;ATGCGC,0.001635;ATGTAGCC,0.001598;ATCAGC,0.001598;ATCTTAGC,0.001561;ATAGCAGC,0.001152;AATGTAGC,0.001115;ATCGC,0.001040;ATTAGC,0.001003;ATGTGTAGC,0.001003;
ATTATAG,0.857189;ATTATGG,0.022894;ATTATG,0.016659;ATTATAAG,0.008562;ATTAG,0.008143;AGTATAG,0.005398;ATATAG,0.003723;ATTATATAG,0.003443;ATTATGAG,0.003257;AATATAG,0.002978;ATTTATAG,0.002932;ATTGTAG,0.002932;ATTATCG,0.002141;AATTATAG,0.001908;ATAG,0.001536;ATTG,0.001489;ATTACTAG,0.001303;ATTATAGG,0.001210;ATTGCAG,0.001117;ATTATAAAG,0.001024;ATTACCAG,0.000931;ATTACATAG,0.000838;ATTGCCG,0.000838;ATTACAG,0.000838;ATTACCG,0.000791;ATTACG,0.000698;
CACAGGT,0.768068;CACGGGT,0.029226;CCTGGGT,0.016070;CGCAGGT,0.011829;CTGGGT,0.011367;CAGGT,0.011281;CACGGT,0.010184;CACAAGGT,0.006405;CTGAGT,0.005828;CTGGT,0.005770;CACAGT,0.005078;CACAGAGT,0.004385;CACGAGT,0.004183;CACAGAT,0.003520;CCTGGT,0.003520;CACGGAGT,0.003174;CGGT,0.003029;CCACAGGT,0.003000;CACCAGGT,0.002539;CACAGGGT,0.002366;CACAGGTT,0.002164;CTGGAGT,0.002106;CTACAGGT,0.002077;CCTGAGT,0.001962;CCTGGAGT,0.001875;CTAGGT,0.001558;
CACTTAT,0.782440;CATAT,0.038639;CCTTAT,0.022185;CTTAT,0.017326;CGCTTAT,0.012366;CACTAT,0.008713;CACTTGT,0.008345;CACTTTAT,0.004558;CACCCAT,0.004357;CGCTAT,0.003954;CAT,0.003552;CGCAT,0.003552;CACTT,0.003519;CCCTTAT,0.003184;CACCAT,0.002681;CCACTTAT,0.002681;CGCCAT,0.002413;CACTTATT,0.001810;CACT,0.001743;CCATAT,0.001609;CTAT,0.001475;CGCCCAT,0.001307;CACACTTAT,0.001273;CTTTTAT,0.001240;CGCCT,0.001206;CACATAT,0.001173;
CAGGTAT,0.796332;CGGGTAT,0.043773;CGGTAT,0.014816;CAGGTGT,0.006395;CAGTAT,0.005867;CAAGGTAT,0.005340;CAGAGTAT,0.005255;CGAGTAT,0.004453;CAGGGTAT,0.004327;CCAGGTAT,0.003103;CCGGTAT,0.003018;CAGATAT,0.002997;CAGGT,0.002976;CAATTAT,0.002680;CTGGTAT,0.002279;CGGAGTAT,0.002237;CGAAT,0.002153;CAGGCAT,0.002089;CAGGTAAT,0.002047;CGAGGTAT,0.001899;CGGTGT,0.001731;CGAATTAT,0.001604;CGATAT,0.001583;CAGTGT,0.001435;CAGGTATT,0.001414;CGTTAT,0.001287;
CCACTTA,0.731018;CCATA,0.064525;CACTTA,0.023730;CCCTTA,0.019876;CCTTA,0.013933;CCGCTTA,0.011965;CCGCA,0.008633;CCGCCA,0.006946;CCACTA,0.006344;CATA,0.005140;CCGCTA,0.005059;CCACCCA,0.004537;CCACCA,0.004176;CCGCCCA,0.003935;CCCACTTA,0.003895;CCA,0.003734;CTTA,0.003654;CCACTTTA,0.003574;CCCATA,0.003373;CTACTTA,0.002088;CCATAA,0.001606;CCACACTTA,0.001526;CCACTTAA,0.001405;CCGCACTTA,0.001245;CCACATA,0.001245;CGCCA,0.001124;
CCCGTTG,0.794801;CCGTTG,0.091097;CGTTG,0.010427;CCCATTG,0.007469;CCCCGTTG,0.006573;CCATTG,0.003974;CCCGTG,0.003735;CCCGGTG,0.003466;CCCGTTTG,0.003346;CCACGTTG,0.002719;CCGGTG,0.002480;CACGTTG,0.002091;CCGATTG,0.002002;CCGTG,0.001882;CCCGATTG,0.001882;CCAGTTG,0.001823;CCCACGTTG,0.001524;CCCG,0.001285;CATTG,0.001255;CCCGATG,0.001076;CCGTTTG,0.000986;CGCGTTG,0.000956;CCAATTG,0.000926;CCCATTTG,0.000896;CGGTG,0.000866;CCGATG,0.000866;
CCGGACG,0.860336;CGGACG,0.051669;CCAGACG,0.009802;CCCGGACG,0.006025;CTGGACG,0.004570;CCGGGCG,0.003292;CCGGACAG,0.002689;CCGGACCG,0.002395;CCGGACTG,0.002131;CCGGATG,0.001675;CCAGGACG,0.001631;CCGGACGCG,0.001558;CAGACG,0.001514;CCAGGCG,0.001381;CAGGACG,0.001323;CCGGACACG,0.001264;CCGAACG,0.001234;CCGGTTG,0.001146;CCGGACGG,0.001102;CCAGCG,0.001073;CCGAGACG,0.001073;CCAGTTG,0.001029;CCGGGACG,0.000999;CCGG,0.000867;CCAG,0.000779;CCTGGACG,0.000735;
CCGTTGT,0.857966;CGTTGT,0.025410;CCGTTAT,0.013253;CCATTGT,0.009529;CCGTT,0.006133;CCGTTTGT,0.005148;CCCGTTGT,0.004929;CCGT,0.002410;CCGGTGT,0.002410;CCGTTGTT,0.002300;CCGTGT,0.001643;CCGATTGT,0.001555;CAATTGT,0.001490;CATTGT,0.001468;CCGTTAAT,0.001468;CCGTTATT,0.001424;CAGTTGT,0.001227;CGTTAT,0.001161;CGGTGT,0.001117;CGATTGT,0.001051;CCGTTGCT,0.001030;CCGTTT,0.000986;CCACGTTGT,0.000964;CCATTTGT,0.000832;CCATTAT,0.000810;CCAGTTGT,0.000810;
CCTAAGT,0.753043;CTAAGT,0.079053;CCTAAAGT,0.018409;CCTAGT,0.012916;CCTAAAT,0.011951;CCCTAAGT,0.008833;CTAAAGT,0.005419;CTAGT,0.005048;CCTGGT,0.003711;CCTGAT,0.002672;CCTGAGT,0.002524;CTAAAT,0.002524;CCTAAATT,0.002524;CCAGT,0.002301;CAGT,0.002227;CCTAAGTT,0.002227;CCTAGAAGT,0.002153;CCTAGGT,0.002078;CCTAATT,0.002078;CTGAT,0.001633;CTGGT,0.001559;CCTAGAAT,0.001559;CCTAAAAGT,0.001559;CCTAGAGT,0.001410;CACAAGT,0.001336;CAAGT,0.001336;
CGCCCGT,0.805850;CGCCGT,0.060234;CGCCCCGT,0.011883;CGCCCAT,0.011509;CGCGT,0.006538;CCCGT,0.006435;CACCCGT,0.005516;CCGT,0.005005;CGCCAT,0.003575;CGCCCGAT,0.002588;CGCCAAT,0.002469;CGT,0.002452;CGCCAGT,0.002060;CGCCCGTT,0.001668;CGCGCCCGT,0.001634;CGCCGAT,0.001583;CCGCCCGT,0.001583;CGCCCACGT,0.001515;CACCGT,0.001498;CATACGT,0.001379;CGCGCCGT,0.001090;CGCCACGT,0.001090;CGCCCAGT,0.001073;CGCCGGT,0.001039;CGCCCGCGT,0.000970;CGCCCGGT,0.000902;
CGGACGG,0.830336;CGGACAG,0.059314;CGGACG,0.015589;CAGACGG,0.009444;CCGGACGG,0.006511;CGGGCGG,0.003579;CGGACCGG,0.003213;CGGACGAG,0.003040;CGGACAGG,0.002760;CGGACTGG,0.002091;CGGACGGG,0.001940;CAGGACGG,0.001919;CAGACAG,0.001876;CGGTTGG,0.001725;CGG,0.001703;CGAACGG,0.001660;CGGATGG,0.001596;CTGGACGG,0.001574;CGGACCCGG,0.001358;CGGACTG,0.001186;CCCGGACGG,0.001143;CGGGACGG,0.001056;CGAGACGG,0.001013;CAGTTGG,0.001013;CGGACCAG,0.000927;CGGCGG,0.000906;
CGGCATG,0.862264;CAGCATG,0.032021;CGGCG,0.006465;CGGCGTG,0.006244;CATG,0.005548;CGGCGCTG,0.003734;CGGCGCG,0.003533;CGACATG,0.003449;CCGGCATG,0.003270;CGGCTG,0.001888;CAACATG,0.001856;CGGCAG,0.001793;CGTG,0.001698;CGTATG,0.001603;CTGGCATG,0.001529;CGGCACTG,0.001477;CAGCG,0.001456;CGGCGCATG,0.001445;CGGCACATG,0.001371;CGGCATCG,0.001234;CGGCATGG,0.001097;CGCATG,0.001076;CGAGCATG,0.001034;CGGCATAG,0.000949;CGGTATG,0.000875;CGGCACG,0.000875;
CGGTATA,0.845570;CAGTATA,0.037844;CGGTA,0.006988;CGATATA,0.005415;CGTATA,0.004054;CCGGTATA,0.004023;CGGTATAA,0.003388;CGATA,0.002813;CGGTGTA,0.002723;CGTTATA,0.002571;CGAGTATA,0.002450;CGGGTATA,0.002360;CAGGTATA,0.002299;CGACATA,0.001997;CATTATA,0.001936;CCAGGTATA,0.001331;CGGTACA,0.001240;CGGTACCA,0.001210;CGGCATA,0.001180;CGGTATGA,0.001180;CAGTA,0.001180;CATA,0.001119;CGAGGTATA,0.001029;CCCGGTATA,0.001029;CGGTACATA,0.000908;CGGTATCA,0.000847;
CGTTGTA,0.883827;CGTTA,0.009851;CATTGTA,0.009465;CGTTTGTA,0.008030;CGTTATA,0.005381;CGTTTA,0.003974;CGTTGTAA,0.003505;CGTTGGCA,0.003256;CGATTGTA,0.002456;CGTGTA,0.002263;CGGTGTA,0.002042;CGTTGCTTA,0.002014;CGTTGCA,0.001959;CGTTGCCA,0.001738;CATTTGTA,0.001683;CGTTATTA,0.001573;CCGTTGTA,0.001269;CGTTAATA,0.001242;CACGTTGTA,0.001131;CGTTAGCA,0.001076;CGTTGTGA,0.000993;CGTTGA,0.000966;CGCGTTGTA,0.000966;CGTTGCTA,0.000855;CGTTATGTA,0.000855;CGTTGTGTA,0.000745;
CTAAGTG,0.834811;CTAGTG,0.017486;CTAAAGTG,0.015874;CTAAATTG,0.011845;CAAGTG,0.005641;CTGGTG,0.005399;CCTAAGTG,0.005399;CTAAATG,0.004754;CTGATG,0.003626;CAGTG,0.003465;CAAAGTG,0.002740;CTAGGTG,0.002659;CTAATTG,0.002498;CTAAAAGTG,0.002498;CTGAGTG,0.002176;CCAGTG,0.002095;CCAAGTG,0.001934;CTAGAGTG,0.001773;CTAGAAGTG,0.001692;CTTAAGTG,0.001612;CTAGATG,0.001612;CTAAG,0.001370;CACAAGTG,0.001289;CTTTAAGTG,0.001289;CTGAAGTG,0.001209;CTAAAGATG,0.001128;
CTATGTA,0.864291;CTGTA,0.019712;CTATATA,0.008064;CTATA,0.006961;CTGTGTA,0.004411;CATGTA,0.003860;CTATGTAA,0.003791;CTATGCA,0.002619;CTATATGTA,0.002550;CCTATGTA,0.002343;CTAATA,0.002274;CTATGCTTA,0.001723;CTATGA,0.001723;CCATGTA,0.001723;CTTTATGTA,0.001654;CTA,0.001654;CTATCA,0.001585;CCTGTA,0.001585;CTTATGTA,0.001378;CTATTA,0.001310;CTGTATA,0.001310;CTATGGCA,0.001172;CTATAGCA,0.001103;CTATATTA,0.001034;CTATCATA,0.001034;CTATGTGA,0.000965;
CTTATAT,0.852517;CATAT,0.021999;CTTAT,0.018772;CATATAT,0.009520;CTATAT,0.009171;CTTATGT,0.007987;CTTTATAT,0.005325;CCCATAT,0.003711;CTTATATT,0.002985;CTTATATAT,0.002474;CTTGTAT,0.002394;CTAT,0.001883;CCATAT,0.001829;CCTTAT,0.001587;CTTATAAT,0.001345;CCTTATAT,0.001237;CTTATCT,0.001237;CTTTAT,0.001076;CAT,0.000995;CTTACTAT,0.000914;CTTATCAT,0.000861;CTT,0.000807;CTTACATAT,0.000780;CTTATACT,0.000753;CCTGT,0.000753;CGCATAT,0.000699;
GAATCCA,0.783001;GAATCA,0.103740;GATCCA,0.013878;GAATCCCA,0.010416;GAATCAA,0.008894;GATCA,0.007103;GAATCGA,0.003939;GTCCA,0.003641;GAGATCCA,0.002835;GAGTCCA,0.002656;GGAATCCA,0.002596;GTCA,0.002238;GAGTCA,0.002119;GAAATCCA,0.002089;GAATCTA,0.001761;GAATCCAA,0.001701;GGATCCA,0.001582;GAATA,0.001403;GAAGATCCA,0.001313;GAAGTCCA,0.001253;GAGATCA,0.001194;GGATCA,0.001164;GAATCCGA,0.001134;GGTCA,0.001104;GAATCCACA,0.001074;GAATTA,0.000955;
GACGGCA,0.848040;GACAGCA,0.038521;GGCGGCA,0.013425;GACA,0.008231;GACGACA,0.004329;GGCAGCA,0.003688;GCGGCA,0.003380;GGCA,0.003131;GACGGCAA,0.002846;GACAACA,0.002597;GACTGGCA,0.002479;GACGGCGA,0.002313;GAGCGGCA,0.002040;GACGTA,0.001992;GACGGCCA,0.001399;GACGGCGCA,0.001245;GACGGCGGCA,0.001222;GACCGGCA,0.001210;GACGA,0.001174;GACGGCTTA,0.001150;GACGGTA,0.001079;GACGCGGCA,0.001067;GAACGGCA,0.001056;GATGGCA,0.001032;GTTGGCA,0.001020;GACGCA,0.000996;
GAGGAAT,0.746371;GAGAAT,0.068741;GAAT,0.020696;GAGGGAAT,0.018143;GGGAAT,0.014245;GAGAT,0.011692;GGAAT,0.010617;GAAGAT,0.010550;GAAAT,0.009575;GGGGAAT,0.007291;GAGAGAT,0.006451;GAAGAAT,0.004569;GAGAAAT,0.003864;GAAGGAAT,0.003830;GAGGAGT,0.003057;GAGGT,0.003024;GAGT,0.002385;GAAAAT,0.002285;GAGGAT,0.001848;GAGGAGAT,0.001848;GAGGGGAAT,0.001747;GAT,0.001680;GGAGGAAT,0.001344;GGAGAAT,0.001310;GAGAGT,0.001310;GAGAGAAT,0.001310;
GATTATA,0.897998;GTTATA,0.015465;GATTA,0.008980;GATATA,0.007616;GATTGTA,0.003924;GATTATAA,0.003426;GGTTATA,0.003160;GATTTATA,0.003060;GAATTATA,0.003060;GATTATATA,0.001630;GATTATGA,0.001563;GATTACA,0.001364;GGTATA,0.001364;GGTCATA,0.001197;GATTACTA,0.001197;GATTATCA,0.001031;GAGTTATA,0.001031;GATTGCA,0.000998;GATTCATA,0.000931;GGATTATA,0.000831;GATTACATA,0.000798;GATTCTA,0.000765;GATTTA,0.000732;GAATATA,0.000698;GATA,0.000665;GATTACTTA,0.000665;
GCCCGTT,0.794242;GCCGTT,0.074986;GCCCGT,0.012085;GCCCCGTT,0.011520;GCGTT,0.010331;GCCCATT,0.008732;GCCCGTTT,0.005692;GCCATT,0.004171;GCCGT,0.003158;GGCCGTT,0.002924;GCCAGTT,0.002261;GCCACGTT,0.002144;GCCCGGT,0.002008;GCCGGTT,0.002008;GCCGTTT,0.001949;GCCCGATT,0.001793;GCCGATT,0.001637;GCCGGT,0.001423;GCCCAGTT,0.001345;GCCCACGTT,0.001345;GCCCGGTT,0.001092;GTT,0.001092;GCGCGTT,0.001014;GCCCGAT,0.000955;GCCGCGTT,0.000858;GCCGAT,0.000838;
GCCTAAG,0.776946;GCTAAG,0.058972;GCCTAG,0.022382;GCCTAAAG,0.020548;GCCCTAAG,0.020014;GCTAAAG,0.006035;GCCTGG,0.005271;GCCTG,0.004660;GCTAG,0.003819;GCTGG,0.003819;GCCCTAG,0.002750;GCCTAAAAG,0.002292;GCCTGAG,0.002215;GCCTAGG,0.002215;GCACAAG,0.002139;GCCAG,0.002062;GCCCTGG,0.001757;GGCTAAG,0.001528;GCCTAGAG,0.001375;GCCACAAG,0.001299;GCCCCTAAG,0.001299;GCCTATAAG,0.001299;GCCG,0.001222;GCAG,0.001146;GCTG,0.001146;GCCCACAAG,0.001069;
GCGCCCG,0.806956;GCGCCG,0.060412;GCCCG,0.016610;GCGCG,0.013046;GCGCCCCG,0.011260;GCGCCAG,0.008167;GCCG,0.007421;GCACCCG,0.004565;GCG,0.003828;GCGCTG,0.003406;GCGCGCCCG,0.002955;GCGCCTG,0.002336;GCGCCGG,0.002228;GCGCCCACG,0.002052;GCCCCG,0.001796;GCGCTTG,0.001688;GCACCG,0.001630;GCGCCCAG,0.001620;GCGCCACG,0.001600;GCCGCCCG,0.001531;GCACGCCCG,0.001315;GCTG,0.001149;GCGCGCCG,0.001060;GCGCGCG,0.000952;GCGCCCGCG,0.000834;GCATG,0.000815;
GGAATCC,0.757857;GGAATC,0.089812;GAATCC,0.039358;GATCC,0.008601;GAATC,0.007819;GGAATCCC,0.007038;GGGAATCC,0.006442;GGAGTCC,0.005399;GGAGATCC,0.004692;GGTCC,0.003724;GAGATCC,0.003649;GAGTCC,0.002830;GTCC,0.002755;GGAGTC,0.002681;GGTC,0.002420;GGATCC,0.002346;GATC,0.002309;GAAATCC,0.002160;GAAGTCC,0.002011;GGAATCAC,0.001862;GGAGATC,0.001787;GGAATCGC,0.001527;GAGATC,0.001340;GGGATCC,0.001340;GGATC,0.001229;GAGTC,0.001192;
GGACGGC,0.853415;GGACAGC,0.045159;GGAC,0.009828;GGACGAC,0.008478;GACGGC,0.006367;GGACGC,0.004602;GGGCGGC,0.004395;GGACAAC,0.003806;GGACTGGC,0.003184;GGTTGGC,0.003062;GAACGGC,0.002578;GGCGGC,0.002422;GGATGGC,0.001938;GGACTGAC,0.001436;GGGACGGC,0.001350;GGACGGCC,0.001298;GGACCGGC,0.001263;GGACGAGC,0.001055;GGATGAC,0.001021;GAGACGGC,0.000917;GGGCAGC,0.000865;GGACC,0.000848;GGACGCGGC,0.000831;GGACAGCGGC,0.000796;GGACGGCGC,0.000779;GGACGAAGC,0.000761;
GGCATGC,0.859549;GGCATAC,0.019249;GCATGC,0.009250;GGCGTAC,0.008083;GGCGTGC,0.007061;GGCATC,0.004324;GGCGC,0.004324;GAGCATGC,0.003467;GACATGC,0.003211;GGCATGCC,0.002317;GGCTGC,0.002208;GTATGC,0.001861;GTGC,0.001825;GGC,0.001825;GGCATCGC,0.001752;GGCAGC,0.001733;GGCAC,0.001715;GGCACATGC,0.001715;GGCATCAC,0.001697;GGCATGTGC,0.001679;GGTATGC,0.001679;GGCGCTGC,0.001441;GGCATTGC,0.001405;GGCAATGC,0.001314;GGCGGC,0.001186;GGCGCATGC,0.001131;
GGCGCCC,0.777806;GGCGCC,0.079896;GGCGC,0.018873;GCGCCC,0.013579;GGCACCC,0.007632;GGCGCCCC,0.006128;GGC,0.005112;GGCGCGCCC,0.004750;GACGCCC,0.004659;GAGCGCCC,0.004224;GGCGCCAC,0.002919;GGCACC,0.002683;GCGCC,0.002611;GGCGCGC,0.002593;GGCCC,0.002502;GGCC,0.002230;GCCC,0.001904;GGCACGCCC,0.001849;GGCGCCGC,0.001577;GCC,0.001505;GGCATAC,0.001360;GGCGCGCC,0.001251;GGGCGCCC,0.001142;GACGCC,0.000961;GC,0.000870;GGCGCCCAC,0.000798;
GGTATAA,0.856332;GGTATA,0.019869;GTATAA,0.015677;GAGTATAA,0.007182;GGTATAAA,0.005701;GTTATAA,0.004248;GATATAA,0.004164;GGTGTAA,0.003521;GGGTATAA,0.003326;GGTATGA,0.002822;GGTAA,0.002655;GGCATAA,0.002347;GGTACAA,0.001649;GGTA,0.001537;GACATAA,0.001509;GGTACTAA,0.001397;GGTATCA,0.001313;GATAA,0.001174;GAATAA,0.001062;GGTACATAA,0.000894;GGTACCAA,0.000866;GAACAA,0.000866;GGTATAGA,0.000838;GGTATATAA,0.000838;GGTATAAAA,0.000810;GAGGTATAA,0.000782;
GGTATAG,0.818148;GGTATGG,0.030940;GGTATG,0.017054;GTATAG,0.013109;GGTATAAG,0.008574;GGTAG,0.006306;GAGTATAG,0.006182;GGTGTAG,0.003448;GATATAG,0.002982;GGGTATAG,0.002889;GGTATGAG,0.002485;GGCATAG,0.002423;GTTATAG,0.001988;GGTG,0.001926;GGTATCG,0.001771;GGTATATAG,0.001212;GGTACCAG,0.001149;GACATAG,0.001056;GGTAGCAG,0.001025;GGTACAG,0.000994;GGTATATG,0.000870;GGTATAAAG,0.000839;GATAG,0.000839;GTAG,0.000777;GGTACCG,0.000746;GGTATAGG,0.000714;
GGTTACT,0.827949;GGTTGCT,0.023832;GTTACT,0.012146;GTTTACT,0.008227;GGTTAT,0.007414;GGTTTACT,0.006461;GATTTACT,0.006426;GAGTTACT,0.006249;GATTACT,0.005508;GGTACT,0.005473;GGATTTACT,0.003919;GGTT,0.003637;GGATTACT,0.002860;GGTTACCT,0.002683;GGTTCT,0.002436;GGTTGCACT,0.002401;GGGTTACT,0.002083;GGTGCT,0.001942;GGTTACTT,0.001801;GTTGCT,0.001730;GGTTGCCT,0.001589;GGTTT,0.001554;GGT,0.001306;GATTT,0.001271;GATTGCT,0.001271;GGTTACACT,0.001165;
GTACGGT,0.839107;GTACAGT,0.034777;GTGCGGT,0.014614;GTACGAT,0.005927;GCGGT,0.005386;GTGGT,0.005169;GTGCAGT,0.004871;GTACCGGT,0.003897;GCACGGT,0.003356;GTACGT,0.002950;GTACGTT,0.002733;GTACGGTT,0.002544;GTACGAGT,0.002057;GTACACGGT,0.002003;GTACATT,0.001922;GGCGGT,0.001867;GCGCGGT,0.001840;GTACGGGT,0.001678;GTGAT,0.001651;GTACAGGT,0.001516;GTACCCGGT,0.001380;GTACCAGGT,0.001353;GGTACGGT,0.001245;GTACGATT,0.001083;GGT,0.001055;GTACGCGGT,0.000947;
GTAGAGG,0.671463;GTAGAG,0.053748;GTGAGG,0.028272;GTAGG,0.027126;GTAGGG,0.021719;GTAAGAGG,0.020665;GTAAGG,0.012372;GTAGAAGG,0.008981;GTAGAAG,0.008248;GTAGGGG,0.007973;GTAAG,0.007744;GTAG,0.006919;GTAGAGGG,0.005544;GTGAAGG,0.005315;GTGAG,0.004628;GTAAAGG,0.004628;GTAAGGG,0.004582;GTAGGAG,0.004078;GTAGAGAG,0.003849;GTGAAG,0.003849;GCAGAGG,0.003803;GTAGAGAGG,0.003620;GTAAGAG,0.003253;GTGGGG,0.003162;GAGG,0.002658;GTGGG,0.002658;
GTAGCCT,0.822357;GTAGCT,0.023091;GTAACCT,0.021426;GTGGCCT,0.014640;GTAGCCCT,0.007939;GCAGCCT,0.006573;GTAACT,0.006104;GGCCT,0.003457;GTAAGCCT,0.003415;GCCT,0.003372;GTAGCGCT,0.002817;GCCAGCCT,0.002604;GTAT,0.002390;GTAGCCTT,0.002262;GTGACCT,0.002219;GTAAT,0.001921;GTAGCCCCT,0.001750;GTAGCTT,0.001750;GCAACCT,0.001622;GCTTAGCCT,0.001323;GTAGCACT,0.001195;GCT,0.001067;GCTAGCCT,0.001024;GCTGGCCT,0.000982;GTGCT,0.000982;GGTAGCCT,0.000939;
GTATAAT,0.905227;GTATAT,0.007128;GCATAAT,0.005130;GTAAT,0.004914;GTATATT,0.004536;GTAT,0.003834;GTGTAAT,0.003672;GTATAAAT,0.003618;GTATAGT,0.003240;GTATGT,0.003240;GTATAATT,0.001836;GTATGAT,0.001566;GGTATAAT,0.001566;GTACTAAT,0.001242;GTACAAT,0.001134;GTATCAT,0.000918;GTATCAAT,0.000864;GTATGGT,0.000810;GTACTTAAT,0.000810;GTATGAAT,0.000810;GTACCAAT,0.000810;GTATATAAT,0.000756;GTTATAAT,0.000702;GTCATAAT,0.000702;GTATCGT,0.000648;GCCATAAT,0.000594;
GTATAGT,0.847751;GTATGGT,0.031502;GTATAAT,0.009371;GTATGAT,0.008074;GTAGT,0.006560;GTATGAGT,0.004469;GTATAAGT,0.004181;GCATAGT,0.004037;GTATATT,0.002956;GTATGT,0.002379;GTATAATT,0.002018;GTGTAGT,0.002018;GGTATAGT,0.001874;GTATAGTT,0.001586;GTATATAGT,0.001514;GTAT,0.001298;GTATCGT,0.001225;GTATAGAT,0.001153;GTATGGAT,0.001153;GTATAT,0.001081;GTATAGGT,0.001081;GTACAGT,0.001081;GTACTAGT,0.001009;GTGGT,0.000937;GCCATAGT,0.000865;GTATGATT,0.000865;
GTGGCGC,0.887947;GTAGCGC,0.013846;GTGGC,0.012798;GTGGCAC,0.011062;GGCGC,0.005543;GCGGCGC,0.002344;GTGGCC,0.001737;GTGGCGCGC,0.001670;GTAAC,0.001654;GTGACGC,0.001637;GTGGCAGC,0.001571;GCTGGCGC,0.001521;GTAGC,0.001521;GATGGCGC,0.001388;GTGGCGCC,0.001371;GTGGCCGC,0.001338;GTGCGC,0.001313;GTGGCACGC,0.001172;GTTGGCGC,0.001155;GTGGCTGC,0.001080;GTGGCGGC,0.001039;GGTGGCGC,0.001022;GTATGGCGC,0.000981;GTAACGC,0.000914;GCGC,0.000914;GTAAGCGC,0.000740;
GTGGTTA,0.895832;GTAGTTA,0.010763;GTGGTTTA,0.005060;GGTTA,0.004927;GTGATTTA,0.004216;GTGGATTTA,0.003994;GTGATTA,0.003839;GTGGATTA,0.003107;GTGGTA,0.002929;GTGGTTAA,0.002485;GTAGTTTA,0.002086;GTGTTA,0.002019;GTGAGTTA,0.001420;GTGGGTTA,0.001331;GTGGACA,0.001265;GCGGTTA,0.001243;GTGGTCA,0.001243;GTGGTTGA,0.001198;GTGAATTTA,0.000976;GTTA,0.000910;GTGGATA,0.000910;GCTGGTTA,0.000888;GTTTA,0.000888;GTGGA,0.000865;GGTGGTTA,0.000821;GTTGGTTA,0.000799;
GTTACTA,0.883582;GTTGCTA,0.013988;GTTATA,0.010378;GTTTACTA,0.005802;GTTA,0.005221;GTACTA,0.004964;GTTACCA,0.004835;GATTACTA,0.004770;GTTACCTA,0.003545;GGTACTA,0.002901;GTTACACTA,0.002321;GTTACTAA,0.002256;GTTACA,0.002063;GATTTACTA,0.002063;GTTGCA,0.001612;GTTGCACTA,0.001547;GTTACTTTA,0.001418;GTTTA,0.001354;GTGCTA,0.001289;GTTACTTA,0.001225;GTTTTA,0.001160;GTTCTA,0.001031;GTTCACTA,0.001031;GACACTA,0.000902;GGTTACTA,0.000774;GATACTA,0.000774;
GTTGTAG,0.843375;GTTGTGG,0.018154;GTTGTG,0.012129;GTTTGTAG,0.007683;GTTAG,0.006972;GTTGTAAG,0.005657;GTTGG,0.005525;GTTG,0.003473;GTTGGCAG,0.003210;GTTATGG,0.003184;GTTATAG,0.003157;GTGTAG,0.003026;GTTGCTTAG,0.002736;GTTATG,0.002605;GGTGTAG,0.002368;GTTGCCAG,0.002052;GTTTAG,0.002026;GTTGCAG,0.001894;GTTGTGAG,0.001526;GTTGGCG,0.001526;GTTGCG,0.001421;GATTGTAG,0.001394;GTTAATAG,0.001184;GTTGCCG,0.001158;GTAG,0.001079;GTTGCTGG,0.001000;
TAACACA,0.830075;TAACA,0.045171;TAACGCA,0.011825;TAGCACA,0.007213;TAACTTACA,0.004809;TAACACCA,0.003508;TAACACAA,0.002996;TAACACACA,0.002680;TAACATA,0.002562;TAGCA,0.002326;TACA,0.002326;TAATACA,0.002168;TAACCACA,0.002089;TAACTACA,0.002010;TAACGCACA,0.001853;TTAACACA,0.001695;TAACTTTA,0.001577;TTACA,0.001458;TATACA,0.001340;TAACTTA,0.001301;TAACCTA,0.001301;TAACCA,0.001261;TAACACGA,0.001182;TAACTA,0.001104;TACTTACA,0.001025;TA,0.001025;
TAAGTGG,0.824220;TAGTGG,0.020170;TAAAGTGG,0.017489;TAAATTGG,0.011193;TAAGTG,0.009638;TAAGTAG,0.007540;TAGAGTGG,0.005208;TGATGG,0.004547;TAAATGG,0.004392;TGGTGG,0.003070;TAGGTGG,0.002954;TGAGTGG,0.002798;TAGAAGTGG,0.002643;TAATTGG,0.002604;TGAAGTGG,0.002526;TAAAAGTGG,0.002410;TAAGTGAG,0.002254;TAAATTG,0.001943;TTAAGTGG,0.001904;TCAGTGG,0.001399;TAGATGG,0.001205;TAAG,0.001166;TGG,0.001088;TAAGTGGG,0.001049;TAAATTAG,0.001010;TAAAATTGG,0.001010;
TAATCCG,0.851030;TAATCG,0.055799;TAATCCCG,0.015340;TAATCAG,0.006810;TATCCG,0.005632;TAAATCCG,0.003652;TGTCCG,0.002993;TAATCCAG,0.002521;TAATCACG,0.002380;TAATCTG,0.002144;TTAATCCG,0.002097;TAATCGG,0.001979;TCCG,0.001814;TAATCCACG,0.001532;TAAATCG,0.001532;TAGTCCG,0.001414;TCAATCCG,0.001390;TAATCCTG,0.001367;TGATCCG,0.001296;TGTCG,0.001249;TCATCCG,0.000966;TCG,0.000919;TCGTCCG,0.000919;TAATG,0.000895;TAGTCG,0.000848;TAATCCGG,0.000636;
TACGGTA,0.825201;TACAGTA,0.034803;TGCGGTA,0.023734;TGGTA,0.009057;TGCAGTA,0.008394;TACGATA,0.004221;TACCGGTA,0.003853;TACATTA,0.003608;TACGGTAA,0.003019;TACGAGTA,0.002602;TTACGGTA,0.002454;TACACGGTA,0.002405;TGATA,0.001963;TACA,0.001914;TACGTA,0.001841;TACGGCA,0.001718;TACGGGTA,0.001546;TACGTTA,0.001473;TACGACA,0.001448;TACCCGGTA,0.001350;TACAGGTA,0.001350;TACGA,0.001350;TTTGGTA,0.001325;TACGGTGA,0.001031;TACCTGGTA,0.000859;TGTTA,0.000859;
TACTATG,0.864754;TGCTATG,0.014290;TATG,0.012241;TACTG,0.011324;TATATG,0.009707;TACTGTG,0.004044;TTACTATG,0.003343;TACTATATG,0.002750;TACCTATG,0.002642;TTATG,0.002481;TACTATAG,0.002427;TACTTATG,0.002373;TACCTG,0.002049;TACTAG,0.001887;TCTATG,0.001833;TACACTATG,0.001780;TACATG,0.001672;TACCATG,0.001402;TACTACTG,0.001348;TTTATG,0.001294;TTCTATG,0.001240;TACTTTATG,0.001132;TACCG,0.001132;TCACTATG,0.001079;TTTTATG,0.000971;TACTGCTG,0.000917;
TAGAGGA,0.688568;TAGGA,0.031373;TAGAGA,0.025898;TGAGGA,0.022941;TAAGGA,0.017138;TAAGAGGA,0.017083;TAGAGGGA,0.016481;TAGA,0.014783;TGGGGA,0.009801;TAGGGA,0.009144;TGAAGGA,0.008213;TGA,0.007775;TGGGA,0.007665;TAGAAGGA,0.007173;TGAGA,0.006187;TAGAGAGGA,0.006187;TAGGGGA,0.006078;TAGAGAA,0.004435;TGGA,0.004052;TAGAAGA,0.003778;TAGAGGAA,0.003449;TGAAGA,0.003121;TAAGGGA,0.002847;TAGAA,0.002683;TAAGAGA,0.002464;TAAGA,0.002245;
TAGATTA,0.857958;TGAATTA,0.020187;TGATTA,0.014775;TAAGATTA,0.009899;TAGTTA,0.006827;TAAATTA,0.004925;TGGAATTA,0.004291;TTAGATTA,0.003706;TAGATA,0.003316;TAGATTAA,0.003267;TGGGTA,0.002536;TAGGTA,0.002389;TAGATTTA,0.002292;TAATTA,0.002194;TCGTTA,0.001999;TCGATTA,0.001853;TTGATTA,0.001560;TAGAATTA,0.001512;TGGATTA,0.001463;TGGAGTA,0.001463;TAGGTCA,0.001317;TAAGTTA,0.001219;TAAAGATTA,0.001170;TAGA,0.001073;TAGATTGA,0.000878;TTTAGATTA,0.000878;
TAGCCTA,0.790011;TAGCTA,0.054045;TAACCTA,0.022278;TAGCCCTA,0.021071;TGGCCTA,0.016970;TAACTA,0.006595;TAATA,0.005469;TGGCTA,0.003458;TAGCCTAA,0.003217;TAAGCCTA,0.003137;TAGCCA,0.002574;TAGCCCA,0.002252;TAACCCTA,0.001850;TA,0.001689;TGACCTA,0.001689;TTAGCCTA,0.001448;TCGCCTA,0.001367;TATA,0.001367;TAGCTAA,0.001287;TATTA,0.001126;TAGCCCCTA,0.000885;TAGCCTGA,0.000885;TAAACCTA,0.000885;TAATACA,0.000804;TTA,0.000804;TATTTA,0.000804;
TAGTACG,0.819648;TGGTACG,0.025272;TGAGTACG,0.009674;TAGTGCG,0.006524;TAATTACG,0.005849;TAATTGCG,0.004499;TAAGTACG,0.004274;TAGTG,0.004124;TGTACG,0.003825;TGATACG,0.003750;TAATGCG,0.003300;TAATACG,0.002925;TGAAGTACG,0.002775;TAGTACACG,0.002775;TAGTACCG,0.002475;TGTTACG,0.002325;TGGTG,0.002175;TTAGTACG,0.002100;TATTACG,0.002100;TGATGCG,0.002100;TATTGCG,0.001875;TGTGCG,0.001875;TAGTACAG,0.001725;TCGTACG,0.001575;TAGGTACG,0.001500;TAATTTTG,0.001350;
TAGTGGT,0.829036;TGGTGGT,0.021809;TAATTGGT,0.013966;TGATGGT,0.012677;TGAGTGGT,0.007091;TAGTAGT,0.005551;TGGT,0.004262;TAAGTGGT,0.004083;TAGTGAT,0.004083;TATTGGT,0.003903;TAATGGT,0.003653;TGTGGT,0.003510;TAGTGAGT,0.002650;TTAGTGGT,0.002507;TAGTGT,0.002149;TAGTGGTT,0.001970;TAGTGTT,0.001862;TGAAGTGGT,0.001791;TAATTAGT,0.001612;TGGTAGT,0.001576;TAGT,0.001504;TAATT,0.001397;TAGTGGGT,0.001253;TAGTGTGGT,0.001110;TAGTGAATT,0.001074;TTGGT,0.001003;
TATAACA,0.881916;TATAGCA,0.011079;TAACA,0.006613;TGTAACA,0.004977;TATAA,0.004943;TATAACAA,0.003682;TATA,0.003375;TTATAACA,0.003000;TATAATA,0.002966;TACTAACA,0.002863;TACAACA,0.002761;TACCAACA,0.002182;TATAACCA,0.001909;TGCAACA,0.001875;TATAACGA,0.001500;TATAACTTA,0.001432;TATATA,0.001398;TATAAGCA,0.001261;TACTTAACA,0.001159;TATATAACA,0.001125;TATAACGCA,0.001091;TTAACA,0.001023;TGTA,0.000954;TATAAACA,0.000886;TCATAACA,0.000852;TATGGCA,0.000852;
TATAATC,0.907087;TAATC,0.007997;TGTAATC,0.006534;TATAATCC,0.005624;TATATC,0.004129;TATAAATC,0.004064;TATGTC,0.003283;TTATAATC,0.003153;TACAATC,0.002308;TAAATC,0.002081;TACTAATC,0.001918;TATAGTC,0.001723;TATGATC,0.001203;TACCAATC,0.001170;TCTAATC,0.001170;TCATAATC,0.001105;TATATAATC,0.001073;TGCAATC,0.001073;TATCAATC,0.001008;TTAATC,0.001008;TTTATAATC,0.000910;TATAATAATC,0.000910;TGTC,0.000878;TATAATGC,0.000845;TATC,0.000813;TATCATC,0.000780;
TATAGTA,0.846002;TATGGTA,0.021143;TATATTA,0.010023;TATAAGTA,0.008998;TAGTA,0.008340;TATAATA,0.005048;TATA,0.003951;TGTAGTA,0.003585;TATAGTAA,0.003585;TATGATA,0.003146;TATAA,0.003146;TATGAGTA,0.003146;TTATAGTA,0.003073;TATAATTA,0.002341;TATGAAGTA,0.002195;TAAGTA,0.001609;TGGTA,0.001463;TATATAGTA,0.001317;TATGTA,0.001317;TATAAAGTA,0.001097;TACTAGTA,0.001097;TATGTTA,0.000951;TATAAATA,0.000951;TATTA,0.000878;TATAACA,0.000878;TATAGTGA,0.000732;
TATAGTG,0.846597;TATGGTG,0.025043;TATAATTG,0.012050;TATGATG,0.008383;TATGAGTG,0.008225;TAGTG,0.006549;TATAAGTG,0.003877;TATATTG,0.003248;TGTAGTG,0.002986;TATAATG,0.002567;TTATAGTG,0.002253;TATG,0.001938;TGGTG,0.001677;TATAG,0.001519;TATAGTAG,0.001467;TAATTG,0.001467;TATATAGTG,0.001415;TATCGTG,0.001257;TATAGGTG,0.001257;TATGTG,0.001100;TAAGTG,0.001100;TACTAGTG,0.001048;TTTATAGTG,0.000943;TATGAAGTG,0.000891;TATAGATG,0.000891;TACAGTG,0.000838;
TATATAA,0.856339;TATAA,0.026788;TATATA,0.020068;TATATAAA,0.007650;TATGTAA,0.005697;TATA,0.004604;TATAAA,0.003767;TATATATAA,0.003395;TTATATAA,0.003000;TGTATAA,0.002604;TATATGA,0.002163;TTATAA,0.001791;TATACAA,0.001628;TATACTAA,0.001628;TTTATATAA,0.001349;TATATATA,0.001279;TATATAAAA,0.001256;TATATAGA,0.001186;TGTAA,0.001000;TAA,0.000977;TATATCA,0.000953;TATAAAA,0.000907;TATCATAA,0.000884;TATACTTAA,0.000860;TCTATAA,0.000744;TATACCAA,0.000721;
TATGTAG,0.817261;TATGTGG,0.017286;TATGTG,0.015928;TGTAG,0.013273;TATGTAAG,0.007964;TATAG,0.005618;TATGG,0.004754;TATATAG,0.004692;TATG,0.004075;TGTGTAG,0.003519;TTATGTAG,0.002963;TATGCTTAG,0.002902;TATATGG,0.002346;TAG,0.002037;TATGCAG,0.001976;TATATG,0.001914;TATGTGAG,0.001790;TATGGCAG,0.001729;TAGCAG,0.001482;TAATGTAG,0.001420;TATCAG,0.001420;TAATAG,0.001358;TATATGTAG,0.001296;TATCTTAG,0.001235;TATGCCAG,0.001235;TATGAG,0.001173;
TCCACTT,0.773481;TCACTT,0.052843;TCCGCTT,0.029887;TCCCTT,0.015963;TCCCACTT,0.014577;TCCAT,0.013272;TCCACT,0.013190;TCCTT,0.010866;TCCGCT,0.005688;TCCACTTT,0.005423;TCCCGCTT,0.002956;TTCACTT,0.002834;TACTT,0.002569;TTCCACTT,0.002385;TCTT,0.002243;TCAT,0.001998;TCGCTT,0.001814;TCACT,0.001713;TCCACACTT,0.001672;TCCCAT,0.001305;TCCGCCT,0.001244;TCCGCACTT,0.001244;TCCACCTT,0.001121;TCCT,0.001101;TCCATT,0.000917;TCTACTT,0.000897;
TCCGGAC,0.774942;TCGGAC,0.138593;TCCCGGAC,0.011276;TCCAGAC,0.008584;TCAGAC,0.005111;TGGAC,0.004331;TCCGGGC,0.004136;TTCGGAC,0.003356;TCAGGAC,0.003278;TTCCGGAC,0.002107;TCTGGAC,0.002029;TCCGGACC,0.001951;TCCGGGAC,0.001600;TCCAGGAC,0.001561;TCCAGGC,0.001288;TCGGGC,0.000975;TCGAGAC,0.000975;TCCGAGAC,0.000858;TCCGGACGC,0.000819;TCCAGC,0.000819;TCGAAC,0.000780;TTGGAC,0.000663;TGCGGAC,0.000624;TCAGC,0.000624;TCGGGAC,0.000624;TCCGGC,0.000585;
TGGCGCC,0.853631;TGGCGC,0.027231;TAGCGCC,0.025272;TGGCACC,0.009268;TGGC,0.006191;TGGCGCCC,0.003545;TGGCGCGCC,0.003497;TGGCC,0.003306;TAACC,0.002446;TGACGCC,0.002159;TGCGCC,0.002121;TTGGCGCC,0.001940;TAACGCC,0.001758;TGGCACGCC,0.001586;TAGCC,0.001577;TGGCAC,0.001557;TGGCAGCC,0.001433;TGGCGCGC,0.001070;TGGCCGCC,0.001041;TAAGCGCC,0.001022;TCGCGCC,0.001022;TGGCGGCGCC,0.000803;TGTAGCGCC,0.000745;TAGCGC,0.000726;TGGCGGC,0.000726;TCAGCGCC,0.000707;
TGGTTAC,0.836257;TGGTTGC,0.029622;TAGTTAC,0.013798;TGATTTAC,0.006452;TGGTTTAC,0.006169;TGGATTTAC,0.005581;TGGTAC,0.005157;TAGTTTAC,0.004544;TGATTAC,0.004074;TGGTGC,0.003650;TAGTTGC,0.003485;TGGATTAC,0.003391;TTGGTTAC,0.002802;TGGTTACC,0.002308;TGAATTTAC,0.002166;TTTAC,0.001648;TGGTTC,0.001625;TGGTTGCAC,0.001531;TGATTGC,0.001531;TGGTTACAC,0.001531;TGGACAC,0.001389;TGTTAC,0.001248;TGGGTTAC,0.001130;TGAACAC,0.000965;TGGTCAC,0.000965;TGAGTTAC,0.000895;
TGTAGAG,0.742260;TGTGAG,0.026606;TGTAGG,0.022034;TGTAAG,0.017636;TGTAAGAG,0.017548;TGTAG,0.014631;TGTAGAAG,0.007794;TGTGAAG,0.007228;TGTAGGG,0.006662;TGTAAAG,0.006096;TGAG,0.005791;TGTG,0.004267;TGTAGAGG,0.004224;TGTAAGG,0.003179;TATGAG,0.002874;TGGCAGAG,0.002830;TAGAG,0.002526;TTGTAGAG,0.002395;TGCAGAG,0.002308;TGTAGAGAG,0.002264;TGAAG,0.002090;TATAGAG,0.002090;TGTGG,0.001916;TGTAGGAG,0.001698;TGTGGG,0.001655;TGTAAAGAG,0.001481;
TGTAGCC,0.785090;TGTAGC,0.025282;TGTGGCC,0.018630;TGTAACC,0.015775;TAGCC,0.010066;TGGCC,0.009330;TGTGGC,0.005769;TGCTTAGCC,0.004415;TATAGCC,0.004326;TGCAGCC,0.004209;TGTAGCCC,0.003826;TTAGCC,0.003797;TGTAAGCC,0.003296;TGCCAGCC,0.003296;TTGTAGCC,0.003120;TGGC,0.002767;TGCC,0.002531;TGGCAGCC,0.002207;TATGGCC,0.002178;TGTAAC,0.001913;TGCTGGCC,0.001530;TGCTAGCC,0.001442;TGTATGC,0.001383;TAGCAGCC,0.001383;TGTGACC,0.001266;TGCCCAGCC,0.001177;
TTACTAT,0.849557;TACTAT,0.020985;TTGCTAT,0.012004;TTATAT,0.011452;TTAT,0.010202;TTACTGT,0.008545;TTTACTAT,0.007063;TTACT,0.004883;TTTAT,0.004389;TTACCTAT,0.002819;TTACTATT,0.002354;TGCTAT,0.002064;TTACACTAT,0.001918;TTACCAT,0.001889;TTACTTAT,0.001831;TTACCT,0.001773;TAT,0.001715;TTTTAT,0.001686;TTCTAT,0.001570;TCACTAT,0.001337;TCTAT,0.001221;TTTTTAT,0.001192;TTCACTAT,0.001192;TTGCACTAT,0.001134;TTTTACTAT,0.001134;TTACTACT,0.001075;
TTAGATT,0.818985;TAGATT,0.017944;TTGATT,0.013968;TTGAATT,0.012961;TTAGAT,0.011169;TTTAGATT,0.008837;TTAAGATT,0.008101;TTAGATTT,0.006824;TTAAATT,0.005941;TTAGTT,0.005425;TTAGGT,0.005081;TTGGAATT,0.004517;TTAATT,0.003903;TTGGGT,0.003756;TGAATT,0.002798;TGATT,0.002578;TTTTAGATT,0.001890;TTAGT,0.001866;TTGGATT,0.001596;TTGAAT,0.001571;TTCGTT,0.001522;TTCGATT,0.001497;TTAAGTT,0.001497;TTAGAATT,0.001399;TGGAATT,0.001399;TTGGAGT,0.001350;
TTATAGT,0.836257;TTATGGT,0.022208;TATAGT,0.017370;TTATAAT,0.010582;TTATGAT,0.007762;TTTATAGT,0.007310;TTATAAGT,0.004490;TTATGAGT,0.003759;TTAGT,0.003202;TTATATT,0.003028;TTATAATT,0.002611;TTATAGTT,0.002541;TTGTAGT,0.002228;TTATCGT,0.001880;TTATAGAT,0.001636;TTTTATAGT,0.001566;TTACTAGT,0.001497;TTATATAGT,0.001462;TTAT,0.001392;TTATGAAT,0.001392;TAGT,0.001253;TTATGT,0.001149;TTATGGAT,0.001114;TTATAT,0.001079;TATGGT,0.001009;TTACAGT,0.001009;
TTATATA,0.864239;TTATA,0.034699;TATATA,0.015642;TTTATATA,0.006257;TATA,0.004609;TTATATATA,0.003534;TTATGTA,0.003487;TTATATAA,0.003343;TTTATA,0.002890;TTTTATATA,0.002507;TTGTATA,0.001958;TTATAA,0.001576;TTTTATA,0.001504;TTATACTA,0.001361;TTACATATA,0.001290;TTATACA,0.001266;TTA,0.001242;TTACTATA,0.001218;TTATCATA,0.000979;TTATATCA,0.000931;TTATATGA,0.000907;TATATATA,0.000884;TTCTATA,0.000812;TTGCTATA,0.000693;TTATACTTA,0.000645;TTATACCA,0.000621;
TTGTAGA,0.789573;TTGTGA,0.026997;TGTAGA,0.014376;TTGTGAA,0.013119;TTGTAAGA,0.009872;TTGTAA,0.008877;TTTGTAGA,0.007122;TTGTA,0.006232;TTGTAAA,0.005499;TTATGA,0.004294;TTATAGA,0.003326;TTGTAGAA,0.003273;TTAGA,0.003090;TTGA,0.002907;TTGTGGA,0.002592;TTGGCAGA,0.002540;TTGGCGA,0.002147;TTGCAGA,0.001964;TTGTAAAGA,0.001859;TTGTAGGA,0.001833;TTGCTTAGA,0.001781;TTGAA,0.001624;TTGCCAGA,0.001440;TTATGAA,0.001362;TTAGCAGA,0.001309;TTGCGA,0.001205;
";

    #[test]
    fn get_changes() {
        let mut rng = rand::rngs::StdRng::seed_from_u64(42);
        let seq = crate::random_seq(100, &mut rng);
        let model = crate::model::Error::from_stream(ERROR, &mut rng).unwrap();

        let changes = generate_change(&seq, 10.0, &model, &mut rng);

        assert_eq!(
            vec![
                Change {
                    begin: 31,
                    end_raw: 38,
                    end_err: 39,
                    err_seq: vec![71, 71, 84, 65, 71, 67, 67, 84]
                },
                Change {
                    begin: 41,
                    end_raw: 48,
                    end_err: 47,
                    err_seq: vec![84, 71, 67, 71, 67, 67]
                },
                Change {
                    begin: 50,
                    end_raw: 57,
                    end_err: 56,
                    err_seq: vec![84, 84, 71, 84, 71, 65]
                },
                Change {
                    begin: 50,
                    end_raw: 57,
                    end_err: 58,
                    err_seq: vec![84, 84, 71, 84, 65, 71, 71, 65]
                },
                Change {
                    begin: 90,
                    end_raw: 97,
                    end_err: 97,
                    err_seq: vec![65, 67, 65, 71, 67, 65, 84]
                },
                Change {
                    begin: 71,
                    end_raw: 78,
                    end_err: 77,
                    err_seq: vec![84, 65, 65, 67, 67, 65]
                },
                Change {
                    begin: 21,
                    end_raw: 28,
                    end_err: 29,
                    err_seq: vec![84, 65, 71, 84, 84, 84, 65, 67]
                },
                Change {
                    begin: 83,
                    end_raw: 90,
                    end_err: 89,
                    err_seq: vec![65, 65, 84, 67, 71, 71]
                },
                Change {
                    begin: 66,
                    end_raw: 73,
                    end_err: 73,
                    err_seq: vec![84, 84, 71, 84, 65, 84, 65]
                }
            ],
            changes
        );
    }

    #[test]
    fn asm_change() {
        init();

        let mut changes = vec![
            Change::new(1, 7, &[65, 65, 84, 65, 65, 67, 67, 65]),
            Change::new(2, 7, &[65, 84, 65, 71, 67, 65, 67]),
            Change::new(3, 7, &[84, 65, 71, 67, 65, 65, 84]),
        ];

        let mut asm = assemble_change(changes, 7);

        assert_eq!(
            vec![Change {
                begin: 1,
                end_raw: 10,
                end_err: 10,
                err_seq: vec![65, 65, 84, 65, 65, 67, 67, 65, 84]
            }],
            asm
        );

        changes = vec![
            Change::new(5, 7, &[65, 71, 65, 65, 71, 71]),
            Change::new(5, 7, &[65, 71, 65, 71]),
            Change::new(6, 7, &[71, 65, 71]),
            Change::new(7, 7, &[65, 65, 71, 71, 71, 67]),
            Change::new(7, 7, &[65, 71, 71, 71, 71, 67]),
        ];

        asm = assemble_change(changes, 7);

        assert_eq!(
            vec![Change {
                begin: 5,
                end_raw: 14,
                end_err: 13,
                err_seq: vec![65, 71, 65, 65, 71, 71, 71, 67],
            }],
            asm
        );
    }

    #[test]
    fn asm_change_hard() {
        init();

        let changes = vec![
            Change::new(72, 7, &[67, 71, 67, 84, 71, 71]),
            Change::new(76, 7, &[84, 65, 71, 67]),
            Change::new(83, 7, &[65, 65, 67, 84, 84, 67, 71, 67]),
            Change::new(88, 7, &[84, 67, 67, 84, 84, 67, 67]),
            Change::new(88, 7, &[84, 67, 67, 84, 84, 67, 67]),
            Change::new(90, 7, &[67, 84, 84, 67, 71, 71]),
            Change::new(92, 7, &[84, 67, 65, 71, 71, 67]),
        ];

        let t_asm = vec![
            Change {
                begin: 72,
                end_raw: 83,
                end_err: 80,
                err_seq: vec![67, 71, 67, 84, 71, 71, 71, 67],
            },
            Change {
                begin: 83,
                end_raw: 99,
                end_err: 98,
                err_seq: vec![65, 65, 67, 84, 84, 67, 71, 67, 84, 84, 67, 67, 71, 71, 67],
            },
        ];

        assert_eq!(t_asm, assemble_change(changes, 7));
    }

    #[test]
    fn match_pos() {
        let changes = vec![
            Change::new(21, 7, &[84, 65, 71, 84, 84, 84, 65, 67]),
            Change::new(31, 7, &[71, 71, 84, 65, 71, 67, 67, 84]),
            Change::new(41, 7, &[84, 71, 67, 71, 67, 67]),
            Change::new(50, 7, &[84, 84, 71, 84, 65, 71, 71, 65]),
            Change::new(50, 7, &[84, 84, 71, 84, 71, 65]),
            Change::new(66, 7, &[84, 84, 71, 84, 65, 84, 65]),
            Change::new(71, 7, &[84, 65, 65, 67, 67, 65]),
            Change::new(83, 7, &[65, 65, 84, 67, 71, 71]),
            Change::new(90, 7, &[65, 67, 65, 71, 67, 65, 84]),
        ];

        let match_pos = DiffPos::from_change(&assemble_change(changes, 7));

        let raws: Vec<(usize, usize)> = match_pos
            .raw
            .chunks_exact(2)
            .map(|x| (x[0], x[1]))
            .collect();
        let errs: Vec<(usize, usize)> = match_pos
            .err
            .chunks_exact(2)
            .map(|x| (x[0], x[1]))
            .collect();

        assert_eq!(
            vec![
                (21, 28),
                (31, 38),
                (41, 48),
                (50, 57),
                (66, 78),
                (83, 90),
                (90, 97)
            ],
            raws
        );
        assert_eq!(
            vec![
                (21, 29),
                (32, 40),
                (43, 49),
                (51, 59),
                (68, 79),
                (84, 90),
                (90, 97)
            ],
            errs
        );
    }

    #[test]
    fn match_pos_simple() {
        let mut changes = vec![
            Change::new(3, 7, &vec![84; 8]),
            Change::new(24, 7, &vec![71; 6]),
            Change::new(34, 7, &vec![71; 7]),
        ];

        let mut match_pos = DiffPos::from_change(&assemble_change(changes, 7));

        assert_eq!(vec![3, 10, 24, 31, 34, 41], match_pos.raw);
        assert_eq!(vec![3, 11, 25, 31, 34, 41], match_pos.err);

        changes = vec![
            Change::new(56, 7, &vec![71; 6]),
            Change::new(60, 7, &vec![71; 7]),
        ];

        match_pos = DiffPos::from_change(&assemble_change(changes, 7));

        assert_eq!(vec![56, 67], match_pos.raw);
        assert_eq!(vec![56, 67], match_pos.err);

        changes = vec![
            Change::new(80, 7, &vec![71; 8]),
            Change::new(85, 7, &vec![71; 7]),
        ];

        match_pos = DiffPos::from_change(&assemble_change(changes, 7));

        assert_eq!(vec![80, 92], match_pos.raw);
        assert_eq!(vec![80, 92], match_pos.err);
    }

    #[test]
    fn many_change_at_same_pos() {
        init();

        let mut changes = vec![
            Change::new(1, 7, &[65, 65, 84, 65, 65, 67, 67, 65]),
            Change::new(2, 7, &[65, 84, 65, 71, 67, 65, 67]),
            Change::new(3, 7, &[84, 65, 71, 67, 65, 65, 84]),
        ];

        let mut match_pos = DiffPos::from_change(&assemble_change(changes, 7));
        assert_eq!(vec![1, 10], match_pos.raw);
        assert_eq!(vec![1, 10], match_pos.err);

        changes = vec![
            Change::new(5, 7, &[65, 71, 65, 65, 71, 71]),
            Change::new(5, 7, &[65, 71, 65, 71]),
            Change::new(6, 7, &[71, 65, 71]),
            Change::new(7, 7, &[65, 65, 71, 71, 71, 67]),
            Change::new(7, 7, &[65, 71, 71, 71, 71, 67]),
        ];
        match_pos = DiffPos::from_change(&assemble_change(changes, 7));

        assert_eq!(vec![5, 14], match_pos.raw);
        assert_eq!(vec![5, 13], match_pos.err);
    }

    #[test]
    fn apply_changes_() {
        let mut rng = rand::rngs::StdRng::seed_from_u64(42);
        let raw = crate::random_seq(100, &mut rng);

        let changes = vec![
            Change::new(14, 7, &[71, 71, 84, 65, 84, 71, 65, 71]),
            Change::new(21, 7, &[84, 65, 71, 84, 84, 84, 65, 67]),
            Change::new(30, 7, &[84, 71, 84, 65, 67, 67, 67]),
            Change::new(31, 7, &[71, 71, 84, 65, 71, 67, 67, 84]),
            Change::new(41, 7, &[84, 71, 67, 71, 67, 67]),
            Change::new(44, 7, &[67, 71, 67, 67, 71, 84]),
            Change::new(49, 7, &[71, 84, 84, 71, 84, 71, 65, 71]),
            Change::new(50, 7, &[84, 84, 71, 84, 65, 71, 71, 65]),
            Change::new(50, 7, &[84, 84, 71, 84, 71, 65]),
            Change::new(52, 7, &[71, 84, 65, 71, 65, 71]),
            Change::new(54, 7, &[65, 71, 65, 71, 65, 65]),
            Change::new(66, 7, &[84, 84, 71, 84, 65, 84, 65]),
            Change::new(71, 7, &[84, 65, 65, 67, 67, 65]),
            Change::new(79, 7, &[71, 84, 65, 84, 65, 71, 84]),
            Change::new(82, 7, &[84, 65, 84, 67, 67, 71]),
            Change::new(83, 7, &[65, 65, 84, 67, 71, 71]),
            Change::new(87, 7, &[67, 71, 71, 65, 67, 65, 71]),
            Change::new(90, 7, &[65, 67, 65, 71, 67, 65, 84]),
            Change::new(91, 7, &[67, 71, 71, 67, 65, 67, 84, 71]),
        ];

        let err = apply_changes(&raw, &assemble_change(changes, 7));

        assert_eq!(b"TTAGATTATAGTACGGTATGAGAGTTTACTATGTACCCCTAAGTGCGCCCGTTTGTGAGAAATCCACTTGTATAACCAGGTATAGTCGGGACAGCATTGCG".to_vec(), err);
    }
}
