//! Model to get read identity

/* standard use */

/* crate use */
use anyhow::Result;
use rand::distributions::Distribution;

/* local use */
use crate::error::Model;

/// Struct to generate length of fragment
pub struct Identity {
    mean: f64,
    //stdev: f64,
    max: f64,
    dist: rand_distr::Beta<f64>,
}

impl Identity {
    /// Create model from parameter
    pub fn new(mut mean: f64, mut stdev: f64, mut max: f64) -> Result<Identity> {
        if mean <= 0.0 || stdev <= 0.0 {
            anyhow::bail!(Model::LengthParamMustBeUpperThan0);
        }

        mean /= 100.0;
        stdev /= 100.0;
        max /= 100.0;

        Ok(Self {
            mean,
            //stdev,
            max,
            dist: rand_distr::Beta::new(mean, stdev)?,
        })
    }

    /// Get identity from model
    pub fn get_length<R>(&self, rng: &mut R) -> f64
    where
        R: rand::Rng,
    {
	
        if self.mean == self.max {
            self.mean
	} else {
            self.max * self.dist.sample(rng)
	}
    }
}

#[cfg(test)]
mod t {
    use super::*;
    use rand::SeedableRng;

    #[test]
    fn create_dist() {
        assert!(Identity::new(0.0, 0.0, 0.0).is_err());
        assert!(Identity::new(0.0, 1.0, 0.0).is_err());
        assert!(Identity::new(-10.0, -0.8, 0.0).is_err());

        assert!(Identity::new(1.0, 1.0, 0.0).is_ok());
    }

    #[test]
    fn get_value() {
        let mut rng = rand::rngs::StdRng::seed_from_u64(42);
        let dist = Identity::new(90.0, 20.0, 99.0).unwrap();

        let data: Vec<f64> = (0..100).map(|_| dist.get_length(&mut rng)).collect();

        assert_eq!(
            data,
            vec![
                0.8756523632299095,
                0.976803694335681,
                0.32437159273610383,
                0.868322231973796,
                0.8269429863518162,
                0.9897444764245383,
                0.37665954281035724,
                0.9799001453106017,
                0.9455379725486213,
                0.6286395142010204,
                0.7833107619450903,
                0.9436632493789044,
                0.2910389669539559,
                0.9762276958096058,
                0.989999989855298,
                0.6844887530741754,
                0.9853252140330686,
                0.735946030315536,
                0.7644101121324411,
                0.9899994656289738,
                0.7703974671798315,
                0.985450689319652,
                0.941766959810779,
                0.9893796843195122,
                0.9899870892888809,
                0.9899515385200538,
                0.41104169648890826,
                0.7183599292177701,
                0.9016494154469616,
                0.9899999999660408,
                0.9895436517392925,
                0.33919042556472784,
                0.9899243668590088,
                0.8338077868868219,
                0.08421700460681421,
                0.6645487382055345,
                0.9193777173064449,
                0.7828559842204404,
                0.9697745629622836,
                0.9828883195839483,
                0.8562327700763459,
                0.5884869774252163,
                0.9849878448182772,
                0.09416001825199101,
                0.9754979669238769,
                0.8793102233995127,
                0.9651717028299226,
                0.988714886831633,
                0.735966630866178,
                0.989384227465212,
                0.38829085512853,
                0.9393599025468177,
                0.9814930997589747,
                0.989047573461966,
                0.9899839885566338,
                0.9519104444336118,
                0.3383101454373254,
                0.8901521021438208,
                0.885183973966128,
                0.9761317467210832,
                0.7193254796453736,
                0.9899915106704623,
                0.9138702193407476,
                0.9899999940734031,
                0.7891330480614946,
                0.6654599826942634,
                0.6758522564692222,
                0.9639943552745203,
                0.8915939139318567,
                0.9899742346185669,
                0.9875988363292882,
                0.98999314347956,
                0.9278056275557273,
                0.5773847572467119,
                0.9773801596010451,
                0.6774731726348162,
                0.9887062959660485,
                0.9825940614049313,
                0.5072433813946408,
                0.015484641940577318,
                0.8855532370478212,
                0.989796956910945,
                0.740253065324156,
                0.4332979940730667,
                0.36089420536116273,
                0.931570172460204,
                0.0014369613130184669,
                0.9880287191237708,
                0.9899999776443443,
                0.804928634083477,
                0.671109754576221,
                0.9882113380024654,
                0.840209355218781,
                0.4465289491178633,
                0.9048232406477372,
                0.3800568379429529,
                0.9899986080578689,
                0.9855024698800922,
                0.9899997754213703,
                0.9680757257372531
            ]
        )
    }
}
